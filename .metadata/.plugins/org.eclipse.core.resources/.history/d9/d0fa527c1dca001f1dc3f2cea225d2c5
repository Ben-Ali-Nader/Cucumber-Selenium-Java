package Pages;

import java.io.IOException;
import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.MediaEntityBuilder;

import Utils.BaseTest;

public class JOly_Paris2024_Page {


	private WebDriver driver;
	private WebDriverWait wait;
	JavascriptExecutor js;


	@FindBy(id="menu-olympic-games")
	WebElement MenuOlympicGames;

	@FindBy(id="9f3163c0-1954-42a3-baec-48b3726ac7eb")
	WebElement paris2024;

	@FindBy(xpath="//*[@data-cy=\"topbar-button\" and contains(text(),'Médailles')]")
	WebElement medailles;

	@FindBy(id="p2024-languageButton-header")
	WebElement langue;

	@FindBy(xpath="//*[@data-cy=\"topbar-button\" and contains(text(),'Meilleurs moments')]")
	WebElement MeilleursMoments;

	@FindBy(id="p2024-user-header")
	WebElement userConnex;
	
	@FindBy(xpath="//*[@class=\"sc-1a26b28d-0 WGBJo text--title\"]")
	WebElement Tableaudesmédailles;

	public JOly_Paris2024_Page(WebDriver driver) {
		this.driver = driver;
		this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);
	}


	public void verifyElementVisibility(WebElement element, String elementName) throws IOException {
		try {
			if (element.isDisplayed()) {
				BaseTest.test.pass("Le Message '" + elementName + "' est visible.");
			} else {
				BaseTest.test.fail("Le Message'" + elementName + "' n'est pas visible.");
			}
		} catch (Exception e) {
			BaseTest.test.fail("Erreur lors de la vérification de l'élément '" + elementName + "'.",
					MediaEntityBuilder.createScreenCaptureFromPath(BaseTest.takeScreenshot(elementName + "_visibility_error")).build());
		}
	}

	public void waitForPageToLoad() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30)); // Temps d'attente maximum de 30 secondes
		JavascriptExecutor js = (JavascriptExecutor) driver;
		wait.until(webDriver -> js.executeScript("return document.readyState").toString().equals("complete"));
	}
	
	
	public void paris24page() throws IOException {
	    try {
	        // Vérifiez la visibilité et l'interaction avec le bouton "Paris 2024"
	        verifyElementVisibility(paris2024, "Le bouton Paris 2024 est visible et prêt à être cliqué.");
	        
	        if (paris2024.isDisplayed()) {
	            paris2024.click();
	            BaseTest.test.pass("Le bouton Paris 2024 a été cliqué avec succès.");

	            // Vérifiez la visibilité des autres éléments
	            verifyElementVisibility(medailles, "Le bouton Médailles est visible et prêt à être cliqué.");
	            verifyElementVisibility(langue, "Le bouton Langue est visible et prêt à être cliqué.");
	            verifyElementVisibility(MeilleursMoments, "Le bouton Meilleurs Moments est visible et prêt à être cliqué.");
	            verifyElementVisibility(userConnex, "Le bouton Connexion utilisateur est visible et prêt à être cliqué.");
	        } else {
	            BaseTest.test.fail("Le bouton Paris 2024 n'est pas affiché sur la page.");
	        }
	    } catch (Exception e) {
	        // Gestion des erreurs avec des détails spécifiques
	        BaseTest.test.fail("Erreur lors de la vérification des éléments : " + e.getMessage());
	        e.printStackTrace();
	    }
	}
	
	public void medaillesparis2024() throws InterruptedException, IOException {
		waitForPageToLoad();
		medailles.click();
		verifyElementVisibility(Tableaudesmédailles,"le tableau de medaille est visible correctement");
		scrollPage();
		Thread.sleep(3000);
		
	}
	public void scrollPage() throws InterruptedException {
	    JavascriptExecutor js = (JavascriptExecutor) driver;

	    // Scroller vers le bas de la page progressivement
	    long pageHeight = (long) js.executeScript("return document.body.scrollHeight");
	    for (int i = 0; i < pageHeight; i += 100) {
	        js.executeScript("window.scrollBy(0, 100);"); // Scroller de 100 pixels à chaque itération
	        Thread.sleep(50); // Pause de 50 ms entre chaque étape
	    }

	    Thread.sleep(1000); // Pause après avoir atteint le bas

	    // Scroller vers le haut de la page progressivement
	    for (int i = (int) pageHeight; i > 0; i -= 100) {
	        js.executeScript("window.scrollBy(0, -100);"); // Scroller de -100 pixels à chaque itération
	        Thread.sleep(50); // Pause de 50 ms entre chaque étape
	    }

	    Thread.sleep(1000); // Pause après avoir atteint le haut
	}




}
